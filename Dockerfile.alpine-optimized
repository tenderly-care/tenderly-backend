# Optimized Alpine Dockerfile with better package handling
# Uses specific Alpine version and proper retry mechanisms
FROM node:18-alpine3.18 AS builder

# Use specific Alpine version for stability
RUN echo "http://dl-cdn.alpinelinux.org/alpine/v3.18/main" > /etc/apk/repositories && \
    echo "http://dl-cdn.alpinelinux.org/alpine/v3.18/community" >> /etc/apk/repositories

# Update package index with retry mechanism
RUN apk update --no-cache || (sleep 5 && apk update --no-cache)

# Install build dependencies in smaller batches
RUN apk add --no-cache python3 make g++
RUN apk add --no-cache cairo-dev jpeg-dev pango-dev musl-dev
RUN apk add --no-cache giflib-dev pixman-dev pangomm-dev
RUN apk add --no-cache libjpeg-turbo-dev freetype-dev

# Clean up
RUN rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy dependency files first for better layer caching
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci --frozen-lockfile && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY public/ ./public/

# Build the application
RUN npm run build

# Remove dev dependencies after build
RUN npm prune --production

# Stage 2: Production runtime
FROM node:18-alpine3.18 AS runtime

# Use same repository setup
RUN echo "http://dl-cdn.alpinelinux.org/alpine/v3.18/main" > /etc/apk/repositories && \
    echo "http://dl-cdn.alpinelinux.org/alpine/v3.18/community" >> /etc/apk/repositories

# Update package index with retry
RUN apk update --no-cache || (sleep 5 && apk update --no-cache)

# Install essential runtime dependencies
RUN apk add --no-cache dumb-init ca-certificates

# Install graphics and font libraries
RUN apk add --no-cache cairo jpeg pango musl
RUN apk add --no-cache giflib pixman pangomm
RUN apk add --no-cache libjpeg-turbo freetype harfbuzz
RUN apk add --no-cache nss ttf-freefont

# Install Chromium with proper retry mechanism
RUN apk add --no-cache chromium || \
    (sleep 10 && apk add --no-cache chromium) || \
    (sleep 15 && apk add --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/v3.18/community chromium)

# Create non-root user
RUN addgroup -g 1001 -S nestjs && \
    adduser -S nestjs -u 1001 -G nestjs

# Set working directory
WORKDIR /app

# Copy production dependencies
COPY --from=builder --chown=nestjs:nestjs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nestjs /app/package*.json ./

# Copy built application
COPY --from=builder --chown=nestjs:nestjs /app/dist ./dist
COPY --from=builder --chown=nestjs:nestjs /app/public ./public

# Create health check script
RUN echo '#!/usr/bin/env node\nconst http = require("http");\nconst options = {\n  hostname: "localhost",\n  port: process.env.PORT || 3000,\n  path: "/api/v1/health",\n  method: "GET",\n  timeout: 10000\n};\nconst req = http.request(options, (res) => {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\nreq.on("error", () => process.exit(1));\nreq.on("timeout", () => process.exit(1));\nreq.end();' > /app/health-check.js && \
    chmod +x /app/health-check.js && \
    chown nestjs:nestjs /app/health-check.js

# Configure Puppeteer for Alpine Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
    CHROME_BIN=/usr/bin/chromium-browser \
    CHROME_PATH=/usr/bin/chromium-browser

# Clean up packages cache
RUN rm -rf /var/cache/apk/*

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3000

# Add labels
LABEL maintainer="tenderly-backend" \
      version="1.0.0-alpine-optimized" \
      description="Tenderly Backend API - Alpine Optimized with Chromium" \
      org.opencontainers.image.source="https://github.com/tenderly/backend"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node /app/health-check.js || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]
